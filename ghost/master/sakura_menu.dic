OnSakuraMenu
{
	if AutoUpdates[1] == 2 //If an update is available, the user will be notified when they try to open the menu
	{
		"\0\s[0]An update is available!\w8\w8 Do you want to download it?"
		--
		//Note: the download it now option will go straight into updating without directing to another function. You can do this with some things using 'script:' in the function name, but it's finicky. If this gives you issues feel free to replace it.
		all:{
		"\_q\n\n"
		"\![*]\q[Download it now,script:\![updatebymyself\]]\n"
		"\![*]\q[Maybe later,UpdateLater]\n\n"
		"\![*]\q[Turn off auto updates,UpdateOff]\e"
		}
	}
	else //Normal menu opening
	{
			"\0\b2\s[0]oh, hey."
			"\0\b2\s[0]yello,"
			"\0\b2\s[0]howdy."
			"\0\b2\s[0]Whatcha need?"
			"\0\b2\s[0]yo."
		--
		OnMenuRun
	}
}

Select.UpdateLater //If the user decides to update later
{
	AutoUpdates[1] = 1
	
	"\0\s[0]cool,\w4 I'll remind you again later like in a day or so. or something.\e"
}

Select.UpdateOff //If the user no longer wants to be notified about updates
{
	AutoUpdates[0] = "Off"
	AutoUpdates[1] = 1
	
	"\0\s[0]okayy,\w4 you can turn on update notifications again in the Config menu. if you want. i don't know i'm not your mom."
}

OnMenuRun : all //Main menu. The all modifier here means every string will be output in order, so you don't need to write -- between lines
{
	"\b2\n\n\_q"

	if lastTalk != ""; "\![*]\q[Repeat last dialogue,OnLastTalk]"
	"\n"
	"\![*]\q[Say something,OnAiTalk]\n"
	//"\![*]\q[Talk to another ghost,OnStartTalking]\n\n"
	"\![*]\q[Functions,OnFunctionMenu]\n"
	"\![*]\q[Config,OnConfigMenu]\n"
	if debug == 1 //%(debug = 1) in script input to show the debug options
	{
		"\![*]\q[Test Variable,OnTestVar]\n"
		"\![*]\q[To-do list,OnTemplateTodo]\n"
		"\![*]\q[Check Template Version,OnTemplateUpdate]\n"
		//"\![*]\q[Use Interval Stacker,OnIntervalStackerMenu]\n\n"
		//The template update check is in zzz_todo.dic. It doesn't do a network update, it checks my website and compares your version to the most recent version. It cannot update automatically, so as not to erase your progress.
	}
	"\![*]\q[Nevermind,Cancel]\n\n"
}

OnLastTalk //Repeats the last thing the ghost said
{
	"%(lastTalk)\e"
}

//----------Function Menu----------
OnFunctionMenu : all
{
	"\0\b2"
	
	//This will make the opening dialogue random (ignoring the all modifier) with a nonoverlap modifier, if you add more dialogues
	nonoverlap:{ 
	"\s[0]sure,\w4 what do you want me to do."
	}
	"\n\n\_q"
	
	"\![*]\q[Check Email,script:\![biff\]]\n"
	"\![*]\q[Fix the Clock,script:\![execute,sntp\]]\n"
	"\![*]\q[Open Calendar,OpenCalendar]\n"
	"\![*]\q[Open SSP Preferences,SSPPrefs]\n"
	"\![*]\q[Empty Recycle Bin,RecycleBin]\n"
	"\![*]\q[Show System Information,SystemInfo]\n"
	"\![*]\q[Report a bug,BugReport]\n"
	"\![*]\q[Check for updates,UpdateCheck]\n\n"
	
	"\![*]\q[Back to main menu,OnMenuRun]\e"
}

Select.OpenCalendar
{
	"\0\s[0]alrighty,\w4 here's the calendar for you."
	--
	"\![open,calendar]\e"
}

Select.SSPPrefs
{
	"\0\s[0]Sure,\w4 here it is."
	--
	"\![open,configurationdialog]\e"
}

Select.RecycleBin
{
	_gomicheck = FUNCTIONEX("saori/gomi.dll", "-n") //Gets the number of items in the recycle bin
	
	"ughhhhh,\w4 for real.\w8 okay fine.\w8\w8\s[-1]\w8\w8\w8\w8\n\n"
	--
	if _gomicheck > 0 //If there was something to empty
	{
		_gomi = FUNCTIONEX("saori/gomi.dll", "-f") //Calling the Saori to empty the recycle bin
		_s = ""; if _gomicheck != 1; _s = "s" //Plural check
		
		"\s[0]okay i did it.\w8\w8 %(_gomicheck) item%(_s) cleared."
	}
	else //If it's empty
	{
		"\s[0]it was empty.\w8 whaddya want me to do about it? i'd threaten to delete your files or something so i had something to throw away,\w8 but i don't wanna make people afraid of ukagaka."
	}
	--
	"\n\n\![*]\q[Back to functions menu,OnFunctionMenu]\n\![*]\q[I'm done,cancelnodialogue]\e"
}

Select.SystemInfo : all //Partially copied from the GT template, but I tweaked a few things
{
	os_name = FUNCTIONEX("saori/saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori/saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori/saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori/saori_cpuid.dll","cpu.clockex")
	
	"\0\b[2]\_q\f[anchorstyle,none]"
	
	"OS: \_a[OnBlank]%(os_name) %(os_version)\_a\n"
	"Memory Load: \_a[OnBlank]%(memoryload)%\_a\n"
	"Physical Memory: \_a[OnBlank]%(memoryavailphys) KB\_a\n"
	"CPU: \_a[OnBlank]%(cpu_name) %(cpu_clockex)MHz\_a\n"
	"Uptime: \_a[OnBlank]%(systemuphour):%(systemupminute):%(systemupsecond)\_a\n\n"
	
	"Ukagaka: \_a[OnBlank]%property[baseware.version]\_a\n\n"
	
	"\![*]\q[Back to functions,OnFunctionMenu]\n"
	"\![*]\q[Done,cancelnodialogue]\e"
}

Select.BugReport
{
	"\0\s[0]Bugs can be reported to the dev, Ramoraborealis, at okuajub.reports@protonmail.com"
	--
	"\n\n\![*]\q[Back to functions,OnFunctionMenu]\n\![*]\q[I'm done,cancelnodialogue]\e"
}

Select.UpdateCheck //Starts an update check
{
	"\![updatebymyself]\e"
}



//----------Config Menu----------
OnConfigMenu : all //I moved changing name/pronouns/birthday over to Nameteach, because they're info about the user
{
	FixDefaultOptions
	
	if "OnUserBorn" _in_ reference0; {birthday = oldbirthday; ERASEVAR("oldbirthday")} //resets the birthday to the old values, erases the temp variable
	"\0\_q\b2\![close,inputbox,%(reference0)]"
	
	"\f[align,center]—Config—\n\n\f[align,default]"
	
	"\![*]Your name: \_a[OnChangeName]%(username)\_a\n"
	"\![*]Your pronouns: \_a[OnChangePronoun]%(they)/%(them)/%(theirs)\_a\n"
	"\![*]Your birthday: \_a[OnChangeBirthday]%(birthday[0])\_a\n"
	"\![*]Your hemisphere: \_a[OnToggleHemisphere]%(hemisphere)\_a\n\n"
	
	"\![*]Talk rate: \_a[OnChangeTalk]%(talkrate)\_a\n"
	"\![*]Hour Notifications: \_a[OnToggleHourNotifs]%(HourNotifs)\_a\n\n"
	
	"\![*]Auto update checks: \_a[OnToggleUpdate]%(AutoUpdates[0])\_a\n"
	"\![*]Enable Uninstall? \_a[OnToggleUninstall]%(deleteshitai)\_a\n\n"
	
	"\![*]\q[Back to the menu,OnMenuRun]\e"
}

//This is here in case the variables get erased. The buttons will be set to default so the user has something to click in the config menu. This has happened to my users before and resetting them is a painful process. Do not remove these, you'll want to add in new ones for any toggle buttons you have in the config menu. This is also called in BootVars and UpdateVars, which is why it's separate from the config menu itself.
FixDefaultOptions
{
	if username == ""; username = "User"
	if birthday[0] == ""; birthday[0] = "???"
	if hemisphere == ""; hemisphere = "Northern"
	if talkrate == ""; {talkrate = "every 5 minutes"; aitalkinterval = 300}
	if deleteshitai == ""; deleteshitai = "Off"
	if AutoUpdates[0] == ""; AutoUpdates[0] = "On"
	if HourNotifs == ""; HourNotifs = "On"
}

OnToggleHemisphere
{
	if hemisphere != "Northern"; hemisphere = "Northern"
	else; hemisphere = "Southern"
	--
	OnConfigMenu
}

OnChangeTalk : all
{
	nonoverlap:{
	"\0\s[0]okay,\w8 right now i talk %(talkrate)\n\n"
	}
	
	"\![*]\q[Every 30 seconds,OnTalkRate,30]\n"
	"\![*]\q[Every minute,OnTalkRate,60]\n"
	"\![*]\q[Every 3 minutes,OnTalkRate,180]\n"
	"\![*]\q[Every 5 minutes,OnTalkRate,300]\n"
	"\![*]\q[Don't speak,OnTalkRate,0]\n\n"
	
	"\![*]\q[Nevermind,OnConfigMenu]\e"
}

OnToggleHourNotifs
{
	if HourNotifs != "On"; HourNotifs = "On"
	else; HourNotifs = "Off"
	--
	OnConfigMenu
}

OnTalkRate
{
	aitalkinterval = TOINT(reference0) //this changes the talk rate, in seconds. reference0 is sent from the menu options above
	
	if reference0 == "30"
	{
		talkrate = "every 30 seconds" //this displays the talk rate in the menu
		
		"\0\s[0]aaalright! you'll get what you wished for- my motor mouth!"
	}
	elseif reference0 == "60"
	{
		talkrate = "every minute"
		
		"\0\s[0]every minute, okay. i should get my stopwatch."
	}
	elseif reference0 == "180"
	{
		talkrate = "every 3 minutes"
		
		"\0\s[0]Ok,\w4 every 3 minutes."
	}
	elseif reference0 == "300"
	{
		talkrate = "every 5 minutes"
		
		"\0\s[0]okay,\w4 every 5 minutes."
	}
	else
	{
		talkrate = "never"

		"\0\s[0]Ok, i won't bother your work or anything."
	}
	--
	"\n\n\![*]\q[Back to config,OnConfigMenu]\n\![*]\q[I'm done,cancelnodialogue]\e"
}

OnToggleUpdate
{
	if AutoUpdates[0] != "On"; AutoUpdates[0] = "On"
	else; AutoUpdates[0] = "Off"
	--
	OnConfigMenu
}

OnToggleUninstall
{
	if deleteshitai != "On"; deleteshitai = "On"
	else; deleteshitai = "Off"
	--
	OnConfigMenu
}

//Menu has timed out
OnChoiceTimeout
{
	"\0\s[0]oookay. i'm just. gonna close the menu then.\e"
	"\0\s[0]alright, i'm bored. choose something and then come back."
}

//If the main menu has been cancelled
Select.Cancel
{
	"\0\s[0]okay,\w4 if you change your mind, I'll still be here.\e"
}

OnTestVar
{
	"Testing! "
	--
	"\0\s[0]this is more my speed, honestly. i'm not a morning person by any means, so if i'm up before then something is wrong."
	--
	{
		"\0\s[0]i want some breakfast. not necessarily like in being actually hungry but just thinking about it makes me want it. like a commercial. you know, "
		--
		{
			{
				"\0\s[0]cereal is pretty dope. you eat it? i'm craving some "
				--
				{
					"cheerios. but not those boring ass normal ones. i like the peanut butter and chocolate ones. the fruit ones are barfy."
					"special k strawberry or something. i'm not a health nut but i am an absolute FREAK for those dried strawberries bro."
					"cinnamon toast crunch. that shit is straight up just sugar."
				}
			}
			{
				"pancakes. man i love pancakes. you like 'em with stuff inside? i go insane for choccy chip pancakes.\w8\w8 don't even try to keep me away from them. you will not survive."
				"do you like waffles? yes i like waffles. do you like pancakes? yes i like pancakes. do you like french toast? no, actually. i'm not into wet, eggy bread. Frozen stuffs fine though."
				"i can't really eat food since it just falls out of my body and makes a mess. but tasting it still is a lot of fun."
			}
		}
	}
	
	LOGGING("%(currentMood)")
}